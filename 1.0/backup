---------------------------------------------------------------------------------------------------
v1:

from tda import auth, client
import json
import time
import config
import ast
import functions

redirect_uri = 'http://localhost'
token_path = 'token'

c = functions.authenticate()

#try:
#    c = auth.client_from_token_file(token_path, config.api_key)
#except FileNotFoundError:
#    from selenium import webdriver

#    with webdriver.Chrome(executable_path='/Users/ryanhermes/opt/anaconda3/envs/td-bot/chromedriver') as driver:
#        c = auth.client_from_login_flow(driver, config.api_key, redirect_uri, token_path)

# ticker = input('> ').upper()[0:]
ticker = 'AAPL'

# response = c.search_instruments([f'{ticker}'], c.Instrument.Projection.FUNDAMENTAL)
# print(json.dumps(response.json(), indent=4))
response = json.dumps(c.search_instruments([f'{ticker}'], c.Instrument.Projection.FUNDAMENTAL).json(), indent=4)
print(type(response))
print(response)
# print(json.loads(response))
# print(type(response))

dictionary = ast.literal_eval(response)
print(f'dictionary = {dictionary}')
print(type(dictionary))

demo = json.dumps(dictionary, indent=4)
print(demo)
print(type(demo))
print(""""



""")

x = dictionary[f'{ticker}']['fundamental']['marketCap']
print(x)
print(type(x))

while True:
    pass
    # x = c.get_price_history(f'{ticker}',
    #                         period_type=client.Client.PriceHistory.PeriodType.DAY,
    #                         period=client.Client.PriceHistory.Period.ONE_DAY,
    #                         frequency_type=client.Client.PriceHistory.FrequencyType.MINUTE,
    #                         frequency=client.Client.PriceHistory.Frequency.EVERY_THIRTY_MINUTES,)

    # assert x.status_code == 200, x.raise_for_status()
    # print(json.dumps(x.json(), indent=4))

    # r = c.get_quotes(f'{ticker}')

    # assert r.status_code == 200, r.raise_for_status()
    # print(json.dumps(r.json(), indent=4))

    # time.sleep(1)

---------------------------------------------------------------------------------------------------
v2:

import json
import time
import matplotlib.pyplot as plt
import functions

# ticker = input('>> ').upper()[0:]
ticker = 'AAPL'

key = functions.authenticate()
# functions.get_fundamentals(ticker)

entries = 0
price_data = []
time_data = []

while entries <= 20:

    entries += 1

    response = json.dumps(key.get_quotes(f'{ticker}').json(), indent=4)
    dictionary = json.loads(response)

    current_price = dictionary[f'{ticker}']['regularMarketLastPrice']

    pre_epoch = str(dictionary[f'{ticker}']['tradeTimeInLong'])
    epoch = pre_epoch[0:10]
    current_time = str(functions.epoch_time_converter(epoch))

    print(current_time)

    if entries <= 12:
        price_data.append(current_price)
        time_data.append(current_time)

    else:
        price_data.append(current_price)
        price_data.pop(0)
        time_data.append(current_time)
        time_data.pop(0)

    time.sleep(.5)

plt.plot(time_data, price_data)
plt.xlabel('Time')
plt.ylabel('Price')
plt.title(f'Graph of {ticker}')

plt.show()
---------------------------------------------------------------------------------------------------
validstocks:

def valid_stocks():
    list = []

    for item in hotStocks.stockanalysis():
        list.append(item)

    for item in hotStocks.marketwatch():
        list.append(item)

    print(list)

    for ticker in list:
        volume = get_volume(ticker)
        print(f'{ticker} volume: {volume}')

    tier_2 = []
    tier_1 = []

    for item in list:
        if item not in tier_2:
            tier_2.append(item)
        else:
            tier_1.append(item)

    print(f'tier 2: {tier_2}')
    print(f'tier 1: {tier_1}')


valid_stocks()
---------------------------------------------------
[[[[OLD HOTSTOCKS]]]]]

import requests
from bs4 import BeautifulSoup
from requests_html import HTMLSession


def given():
    given_stocks = ['AAPL', 'TSLA', 'SPY', 'AMZN', 'QQQ']
    return given_stocks


def marketwatch():
    marketwatch_url = 'https://www.marketwatch.com/'
    marketwatch_broth = requests.get(marketwatch_url)
    marketwatch_soup = BeautifulSoup(marketwatch_broth.text, 'lxml')

    marketwatch_stocks = []

    tab = marketwatch_soup.find(class_='list list--mover left')

    for movers in tab.find_all('span'):
        marketwatch_stocks.append(movers.text)

    return marketwatch_stocks


def yahoo():
    yahoo_url = 'https://finance.yahoo.com/trending-tickers'
    yahoo_broth = requests.get(yahoo_url)
    yahoo_soup = BeautifulSoup(yahoo_broth.text, 'lxml')

    pre_list = []

    tab = yahoo_soup.find(class_='W(100%)')

    for body in tab.find_all('tbody'):
        for row in body.find_all('tr'):
            # print(row.text)
            for data in row.find_all('td'):
                # print(data)
                # print('=========')
                for x in data:
                    # print(x)
                    pre_list.append(x.text)
                    # print('------------')
                # for character in data:
                    # if character == '-' or character == '^' or character == '=' or character == '.':
                        # break
                    # else:
                        # pre_list.append(data.text)
                    # print(data.text)
                    # print(' ')

    # print(pre_list)
    # yahoo_list = pre_list[0], pre_list[11], pre_list[22], pre_list[33], pre_list[44], pre_list[55], pre_list[66], \
                 # pre_list[77], pre_list[88], pre_list[99], pre_list[110], pre_list[121], pre_list[132], pre_list[143], \
                 # pre_list[154], pre_list[165], pre_list[176], pre_list[187], pre_list[198], pre_list[209], pre_list[
                 #     220], pre_list[231], pre_list[242], pre_list[253], pre_list[264], pre_list[275], pre_list[286], \
                 # pre_list[297], pre_list[308], pre_list[319]

    yahoo_list = pre_list[0], pre_list[11], pre_list[22]

    # print(pre_list)

    # print(yahoo_list)
    return pre_list


def stockanalysis():
    session = HTMLSession()
    stockanalysis_url = 'https://stockanalysis.com/trending/'
    stockanalysis_broth = session.get(stockanalysis_url)
    stockanalysis_soup = BeautifulSoup(stockanalysis_broth.text, 'lxml')

    tab = stockanalysis_soup.find('table', class_='symbol-table svelte-1q7g1fn').prettify()

    occurrences = ([i for i in range(len(tab)) if tab.startswith('</a', i)])

    pre_list = []

    for item in occurrences:
        empty_string = ''

        # TODO: THIS METHOD BELOW DOES NOT INCLUDE 5 DIGIT TICKERS
        # TODO: COULD SIMPLIFY CODE TO BETTER LOG 3 & 5 DIGIT TICKERS

        stock_tuple = (tab[item - 9], tab[item - 8], tab[item - 7], tab[item - 6])

        for letter in stock_tuple:
            empty_string = empty_string + letter

        # TODO: TEMPORARY GOOGLE FILTER BELOW

        if empty_string == 'OOGL':
            pass
        else:
            pre_list.append(empty_string)

    stockanalysis_stocks = []

    for stock in pre_list:
        clean = stock.strip()
        stockanalysis_stocks.append(clean)

    return stockanalysis_stocks

yahoo()

----------------------------------------------
[[[[[[[GRAPHER]]]]]]]
for i in range(iterations):
    time.sleep(1)

    all_prices.append(functions.track(ticker))
    # response = json.dumps(key.get_quotes(f'{ticker}').json(), indent=4)
    # dictionary = json.loads(response)
    #
    # time_data.append(dt.datetime.now().strftime('%H:%M:%S'))
    # current_price = dictionary[f'{ticker}']['regularMarketLastPrice']
    #
    # price_data.append(current_price)
    # price_data_high.append(current_price + 3)
    # price_data_low.append(current_price - 3)
    #
    # time_data = time_data[-scale:]
    # price_data = price_data[-scale:]
    # price_data_high = price_data_high[-scale:]
    # price_data_low = price_data_low[-scale:]
    #
    # all_prices.append(round(current_price))


# print(current_price)
# print(all_prices)
#
# plt.plot(time_data, price_data)
# plt.plot(time_data, price_data_low, color='red')
# plt.plot(time_data, price_data_high, color='blue')
# plt.title(f'Graph of {ticker}')
--------------------------------------------------------------------
[[[[[[[[[[[[[[[MACD]]]]]]]]]]]]]]]]

prices = []

macd_short_length = 8
macd_long_length = 4

for x in range(50):
    prices.append(random.randint(1, 1000))
    print(prices)

    if len(prices) < macd_short_length:
        pass
    else:
        all_total = []
        count = -1
        for i in range(macd_short_length):
            all_total.append(prices[count])
            if len(all_total) > macd_short_length:
                fff = 0
                for k in range(macd_short_length):
                    all_total.pop(fff)
                    fff += 1
            else:
                pass
            count -= 1
            themall = 0
            for item in range(0, len(all_total)):
                themall += item
            macd_short_advanced = (themall / abs(count)) - 1

            xxx = 0
            for item in all_total:
                xxx += item

            ttt = xxx / macd_short_length

    if len(prices) < 3:
        pass
    else:
        macd_short = (prices[-1] + prices[-2]) / 2

    if len(prices) < 5:
        pass
    else:
        macd_long = (prices[-1] + prices[-2] + prices[-3] + prices[-4]) / 4

print(all_total)
print(ttt)
print(macd_long)

-----------------------------------
[[[[[MACD v2]]]]]]

prices = []

macd_short_length = 3
macd_long_length = 5

for x in range(50):
    prices.append(random.randint(1, 1000))

    if len(prices) < macd_short_length:
        pass
    else:
        macd_short_entries = []
        index = -1

        for i in range(macd_short_length):
            macd_short_entries.append(prices[index])
            if len(macd_short_entries) > macd_short_length:
                n = 0
                for k in range(macd_short_length):
                    macd_short_entries.pop(n)
                    n += 1
            else:
                pass

            index -= 1

            subtotal = 0
            for item in macd_short_entries:
                subtotal += item

            macd_short = subtotal / macd_short_length

    if len(prices) < macd_long_length:
        pass
    else:
        macd_long_entries = []
        index = -1

        for i in range(macd_long_length):
            macd_long_entries.append(prices[index])
            if len(macd_long_entries) > macd_long_length:
                n = 0
                for k in range(macd_long_length):
                    macd_long_entries.pop(n)
                    n += 1
            else:
                pass

            index -= 1

            subtotal = 0
            for item in macd_long_entries:
                subtotal += item

            macd_long = subtotal / macd_long_length

print(prices)
print(macd_short)
print(macd_long)
-----------------------------------------------
[[[[[[[[[[[[[[[[[MACD v3]]]]]]]]]]]]]]]]]]

import matplotlib.pyplot as plt
import random
import time

ticker = 'AAPL'

price_data = []
time_data = []
repetitions = 0
floor = 0
ceiling = 3

macd_short_length = 9
macd_long_length = 18
macd_short_data = []
macd_long_data = []
macd_short_frontloader = []
macd_long_frontloader = []

for i in range(1000):
    time.sleep(.1)
    ceiling += .75
    floor += .5
    repetitions += 1

    current_price = random.randint(int(floor), int(ceiling))

    price_data.append(current_price)
    time_data.append(repetitions)

    print(f'============== REPETITION: {repetitions} ==============')

    print(f'current_price: {current_price}')
    print(' ')

    while repetitions < macd_short_length:
        macd_short_frontloader.append(current_price)
        break

    while repetitions < macd_long_length:
        macd_long_frontloader.append(current_price)
        break

    try:
        macd_short_entries = []
        index = -1

        for i in range(macd_short_length):
            macd_short_entries.append(price_data[index])
            index -= 1

        subtotal = 0
        for item in macd_short_entries:
            subtotal += item

        macd_short = subtotal / macd_short_length
        macd_short_data.append(macd_short)

        print(macd_short_entries)
        print(f'macd_short: {macd_short}')

    except IndexError:
        pass

    try:
        macd_long_entries = []
        index = -1

        for i in range(macd_long_length):
            macd_long_entries.append(price_data[index])
            index -= 1

        subtotal = 0
        for item in macd_long_entries:
            subtotal += item

        macd_long = subtotal / macd_long_length
        macd_long_data.append(macd_long)

        print(macd_long_entries)
        print(f'macd_short: {macd_long}')

    except IndexError:
        pass

plt.plot(time_data, macd_short_frontloader + macd_short_data, label=f'Short MACD of {ticker}', color='red')
plt.plot(time_data, macd_long_frontloader + macd_long_data, label=f'Long MACD of {ticker}', color='blue')
plt.plot(time_data, price_data, label=f'{ticker}', color='black')
plt.title(f'Data for {ticker}')
plt.xlabel('Time')
plt.ylabel('Price')
plt.legend()
plt.show()

# input fastLength = 12;
# input slowLength = 26;
# input MACDLength = 9;
# input averageType = AverageType.EXPONENTIAL;
#
# plot Value = MovingAverage(averageType, close, fastLength) - MovingAverage(averageType, close, slowLength);
# plot Avg = MovingAverage(averageType, Value, MACDLength);
#
# plot Diff = Value - Avg;
# plot ZeroLine = 0;
#
# plot UpSignal = if Diff crosses above ZeroLine then ZeroLine else Double.NaN;
# plot DownSignal = if Diff crosses below ZeroLine then ZeroLine else Double.NaN;

--------------------------------------------------------------------
[[[[[[[[[[[[[[[[[[MACD UNSIMPLIFIED]]]]]]]]]]]]]]]]]]

def streamMACD(current_price, macd_short_length, macd_long_length):
    price_data = []
    repetitions = 0

    macd_short_data = []
    macd_long_data = []
    macd_short_frontloader = []
    macd_long_frontloader = []

    repetitions += 1

    price_data.append(current_price)

    while repetitions < macd_short_length:
        macd_short_frontloader.append(current_price)
        break

    while repetitions < macd_long_length:
        macd_long_frontloader.append(current_price)
        break

    try:
        macd_short_entries = []
        index = -1

        for i in range(macd_short_length):
            macd_short_entries.append(price_data[index])
            index -= 1

        subtotal = 0
        for item in macd_short_entries:
            subtotal += item

        macd_short = subtotal / macd_short_length
        macd_short_data.append(macd_short)

    except IndexError:
        pass

    try:
        macd_long_entries = []
        index = -1

        for i in range(macd_long_length):
            macd_long_entries.append(price_data[index])
            index -= 1

        subtotal = 0
        for item in macd_long_entries:
            subtotal += item

        macd_long = subtotal / macd_long_length
        macd_long_data.append(macd_long)

    except IndexError:
        pass

    full_macd_short_data = macd_short_frontloader + macd_short_data
    full_macd_long_data = macd_long_frontloader + macd_long_data

    return [full_macd_short_data, full_macd_long_data]


-----------------------------------------------------------------
[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[SUCCESS A]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
import functions
import time
import datetime as dt

key = functions.authenticate()
ticker = functions.chooseStock(key)[0][0]

iterations = 0

data = []
short_macd_data = []
long_macd_data = []

short_macd_length = 12
long_macd_length = 24

for i in range(200):
    iterations += 1
    time.sleep(1)

    current_time = dt.datetime.now().strftime('%H:%M:%S')
    current_price = functions.streamPrice(ticker, key)
    data.append([current_time, current_price])

    short_macd_subdata = list(list(zip(*data[-short_macd_length:]))[1])
    short_macd = sum(short_macd_subdata) / len(short_macd_subdata)
    short_macd_data.append(short_macd)

    long_macd_subdata = list(list(zip(*data[-long_macd_length:]))[1])
    long_macd = sum(long_macd_subdata) / len(long_macd_subdata)
    long_macd_data.append(long_macd)

    print(f'Iteration: {iterations}')

functions.graph(ticker, data, short_macd_data, long_macd_data)

import ast
import json
import matplotlib.pyplot as plt
import requests
import config
from bs4 import BeautifulSoup
from tda import auth


def authenticate():
    try:
        return auth.client_from_token_file(config.token_path, config.api_key)
    except FileNotFoundError:
        from selenium import webdriver
        with webdriver.Chrome(executable_path='/Users/ryanhermes/opt/anaconda3/envs/td-bot/chromedriver') as driver:
            return auth.client_from_login_flow(driver, config.api_key, config.redirect_uri, config.token_path)


def chooseStock(key):
    marketwatch_broth = requests.get('https://www.marketwatch.com/')
    marketwatch_soup = BeautifulSoup(marketwatch_broth.text, 'lxml')

    marketwatch_stocks = ['AAPL', 'MSFT']

    tab = marketwatch_soup.find(class_='list list--mover left')
    for movers in tab.find_all('span'):
        marketwatch_stocks.insert(0, movers.text)

    contenders = []

    for stock in marketwatch_stocks:
        try:
            response = json.dumps(key.search_instruments([f'{stock}'], key.Instrument.Projection.FUNDAMENTAL).json())
            dictionary = ast.literal_eval(response)
            volume = dictionary[f'{stock}']['fundamental']['vol1DayAvg']
            if volume > 10000000:
                contenders.append([stock])

        except KeyError:
            marketwatch_stocks.remove(stock)

    print(contenders)
    return contenders


def getFundamentals(ticker, key):
    response = json.dumps(key.search_instruments([f'{ticker}'], key.Instrument.Projection.FUNDAMENTAL).json(), indent=4)
    dictionary = ast.literal_eval(response)
    # all_fundamentals = json.dumps(dictionary, indent=4)
    # print(all_fundamentals)

    result = dictionary[f'{ticker}']['fundamental']['vol1DayAvg']
    return result


def graph(ticker, data, short_macd_data, long_macd_data):
    plt.plot([time[0] for time in data], [price[1] for price in data], color='black', label='Price')
    plt.plot([time[0] for time in data], short_macd_data, color='red', label='Short MACD')
    plt.plot([time[0] for time in data], long_macd_data, color='turquoise', label='Long MACD')
    plt.title(f'graph of {ticker}')
    plt.legend()
    plt.show()


def streamPrice(ticker, key):
    response = json.dumps(key.get_quotes(f'{ticker}').json(), indent=4)
    dictionary = json.loads(response)
    while True:
        try:
            price = dictionary[f'{ticker}']['regularMarketLastPrice']
            break
        except KeyError:
            continue

    return price

-------------------------
[[[[Get Fundamentals]]]]

def getFundamentals(ticker, key):
    response = json.dumps(key.search_instruments([f'{ticker}'], key.Instrument.Projection.FUNDAMENTAL).json(), indent=4)
    dictionary = ast.literal_eval(response)
    # all_fundamentals = json.dumps(dictionary, indent=4)
    # print(all_fundamentals)

    result = dictionary[f'{ticker}']['fundamental']['vol1DayAvg']
    return result

-------------------------------------------
[[[[[BS]]]]]
pricebullshit = [148.59, 148.585, 148.595, 148.5965, 148.59, 148.59, 148.6, 148.595, 148.6, 148.5799, 148.55, 148.52,
                 148.525, 148.51, 148.5228, 148.53, 148.53, 148.54, 148.54, 148.54, 148.5499, 148.575, 148.54, 148.535,
                 148.535, 148.55, 148.5401, 148.545, 148.541, 148.545, 148.5427, 148.555, 148.585, 148.5683, 148.56,
                 148.57,
                 148.575, 148.575, 148.58, 148.57, 148.55, 148.56, 148.555, 148.555, 148.555, 148.56, 148.58, 148.59,
                 148.575, 148.56, 148.565, 148.56, 148.56, 148.545, 148.54, 148.535, 148.5301, 148.535, 148.55, 148.56,
                 148.55, 148.55, 148.5561, 148.55, 148.565, 148.55, 148.545, 148.545, 148.54, 148.5594, 148.56, 148.54,
                 148.5499, 148.53, 148.5355, 148.529, 148.525, 148.52, 148.525, 148.51, 148.505, 148.515, 148.51,
                 148.505,
                 148.51, 148.52, 148.52, 148.53, 148.545, 148.5485, 148.53, 148.54, 148.556, 148.56, 148.545, 148.54,
                 148.5393, 148.565, 148.57, 148.5595, 148.58, 148.5777, 148.59, 148.61, 148.625, 148.655, 148.64,
                 148.63,
                 148.63, 148.62, 148.62, 148.61, 148.61, 148.595, 148.605, 148.6, 148.59, 148.58, 148.57, 148.585,
                 148.58,
                 148.57, 148.565, 148.57, 148.565, 148.565, 148.57, 148.55, 148.55, 148.545, 148.52, 148.555, 148.57,
                 148.5611, 148.555, 148.56, 148.545, 148.535, 148.54, 148.525, 148.545, 148.535, 148.54, 148.5336,
                 148.545,
                 148.545, 148.5542, 148.56, 148.545, 148.54, 148.535, 148.525, 148.53, 148.54, 148.53, 148.535, 148.54,
                 148.53, 148.53, 148.53, 148.542, 148.56, 148.56, 148.565, 148.55, 148.545, 148.55, 148.56, 148.56,
                 148.5499, 148.54, 148.54, 148.54, 148.5509, 148.55, 148.56, 148.575, 148.57, 148.55, 148.5601,
                 148.5699,
                 148.575, 148.561, 148.56, 148.58, 148.585, 148.59, 148.585, 148.56, 148.55, 148.55, 148.545, 148.52,
                 148.49, 148.49, 148.49, 148.485, 148.485, 148.48, 148.495, 148.48, 148.47, 148.4799, 148.48, 148.485,
                 148.48, 148.5, 148.5, 148.5, 148.47, 148.48, 148.47, 148.47, 148.47, 148.46, 148.46, 148.44, 148.44,
                 148.43, 148.41, 148.44, 148.41, 148.39, 148.43, 148.44, 148.47, 148.44, 148.42, 148.42, 148.42, 148.41,
                 148.385, 148.35, 148.31, 148.31, 148.31, 148.31, 148.31, 148.31, 148.31, 148.31, 148.31, 148.31,
                 148.31,
                 148.31, 148.31, 148.31, 148.31, 148.31, 148.31, 148.31, 148.31, 148.31, 148.31, 148.31, 148.31, 148.31,
                 148.31, 148.31, 148.31, 148.31, 148.31, 148.31, 148.31, 148.31, 148.31, 148.31, 148.31, 148.31, 148.31,
                 148.3, 148.31, 148.31, 148.31, 148.31, 148.31, 148.31, 148.31, 148.31, 148.31, 148.31, 148.31, 148.31,
                 148.31, 148.31, 148.31, 148.31, 148.31, 148.31, 148.31, 148.31, 148.31, 148.31, 148.31, 148.31, 148.31,
                 148.31, 148.31, 148.31, 148.31]
timebullshit = [1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                118,
                119,
                120,
                121,
                122,
                123,
                124,
                125,
                126,
                127,
                128,
                129,
                130,
                131,
                132,
                133,
                134,
                135,
                136,
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                149,
                150,
                151,
                152,
                153,
                154,
                155,
                156,
                157,
                158,
                159,
                160,
                161,
                162,
                163,
                164,
                165,
                166,
                167,
                168,
                169,
                170,
                171,
                172,
                173,
                174,
                175,
                176,
                177,
                178,
                179,
                180,
                181,
                182,
                183,
                184,
                185,
                186,
                187,
                188,
                189,
                190,
                191,
                192,
                193,
                194,
                195,
                196,
                197,
                198,
                199,
                200,
                201,
                202,
                203,
                204,
                205,
                206,
                207,
                208,
                209,
                210,
                211,
                212,
                213,
                214,
                215,
                216,
                217,
                218,
                219,
                220,
                221,
                222,
                223,
                224,
                225,
                226,
                227,
                228,
                229,
                230,
                231,
                232,
                233,
                234,
                235,
                236,
                237,
                238,
                239,
                240,
                241,
                242,
                243,
                244,
                245,
                246,
                247,
                248,
                249,
                250,
                251,
                252,
                253,
                254,
                255,
                256,
                257,
                258,
                259,
                260,
                261,
                262,
                263,
                264,
                265,
                266,
                267,
                268,
                269,
                270,
                271,
                272,
                273,
                274,
                275,
                276,
                277,
                278,
                279,
                280,
                281,
                282,
                283,
                284,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                292,
                293,
                294,
                295,
                296,
                297,
                298,
                299,
                300, ]

    current_time = timebullshit[iterations - 1]
    current_price = pricebullshit[iterations - 1]
    data.append([current_time, current_price])

-------------------------------------------------------
[[[[[[[[[[[[[[[[[[[[[[[[SHITTY BACKUP]]]]]]]]]]]]]]]]]]]]]]]]
import functions
import time
# import datetime as dt
import matplotlib.pyplot as plt
# import numpy as np

key = functions.authenticate()
# ticker = functions.chooseStock(key)[0][0]
ticker = 'aapl'.upper()

iteration = 0
periods = 900
scale = 1000
average_length = 20
in_position, current_position = False, 0
pl, checkpoint = 0, 0

bullshit1 = [146.31, 146.31, 146.305, 146.3, 146.295, 146.3, 146.33, 146.3379, 146.326, 146.325, 146.325, 146.32,
             146.3183, 146.325, 146.325, 146.325, 146.325, 146.325, 146.32, 146.32, 146.32, 146.312, 146.315, 146.3001,
             146.31, 146.3, 146.3, 146.305, 146.3, 146.2999, 146.29, 146.29, 146.29, 146.29, 146.285, 146.275, 146.275,
             146.28, 146.28, 146.28, 146.28, 146.2799, 146.2799, 146.2799, 146.27, 146.27, 146.26, 146.265, 146.2599,
             146.2599, 146.255, 146.249, 146.245, 146.25, 146.265, 146.275, 146.275, 146.275, 146.275, 146.2782,
             146.2739, 146.28, 146.29, 146.292, 146.29, 146.288, 146.2885, 146.2885, 146.2799, 146.2799, 146.2799,
             146.28, 146.2897, 146.2897, 146.28, 146.28, 146.28, 146.28, 146.2912, 146.295, 146.29, 146.2914, 146.2914,
             146.2914, 146.2974, 146.295, 146.295, 146.295, 146.295, 146.29, 146.29, 146.28, 146.2791, 146.2791, 146.28,
             146.2822, 146.2857, 146.2801, 146.2801, 146.2801, 146.2801, 146.28, 146.2699, 146.27, 146.28, 146.27,
             146.2799, 146.27, 146.265, 146.265, 146.2595, 146.265, 146.265, 146.2507, 146.255, 146.2501, 146.255,
             146.255, 146.27, 146.27, 146.281, 146.28, 146.286, 146.28, 146.2739, 146.2739, 146.2739, 146.2757, 146.2701,
             146.27, 146.26, 146.255, 146.2529, 146.26, 146.2599, 146.2599, 146.26, 146.2699, 146.265, 146.26, 146.27,
             146.27, 146.27, 146.28, 146.29, 146.2961, 146.2961, 146.2961, 146.3, 146.3, 146.3, 146.3, 146.29, 146.28,
             146.2701, 146.275, 146.275, 146.275, 146.275, 146.27, 146.27, 146.255, 146.255, 146.255, 146.2518, 146.2518,
             146.2518, 146.2556, 146.27, 146.28, 146.28, 146.2873, 146.2801, 146.275, 146.2712, 146.2712, 146.2712,
             146.2712, 146.2712, 146.265, 146.265, 146.265, 146.265, 146.265, 146.255, 146.26, 146.27, 146.27, 146.27,
             146.27, 146.25, 146.23, 146.2386, 146.2385, 146.2385, 146.235, 146.235, 146.235, 146.24, 146.24, 146.2391,
             146.235, 146.2228, 146.21, 146.2, 146.208, 146.21, 146.2114, 146.215, 146.215, 146.215, 146.21, 146.205,
             146.2062, 146.2062, 146.2029, 146.205, 146.195, 146.1879, 146.185, 146.16, 146.155, 146.16, 146.1683,
             146.155, 146.18, 146.1912, 146.2, 146.195, 146.205, 146.2101, 146.22, 146.22, 146.2209, 146.225, 146.2299,
             146.2332, 146.23, 146.2399, 146.2399, 146.2399, 146.225, 146.24, 146.24, 146.2453, 146.2401, 146.2401,
             146.2401, 146.2401, 146.24, 146.24, 146.245, 146.24, 146.245, 146.245, 146.24, 146.245, 146.2402, 146.2411,
             146.2411, 146.24, 146.225, 146.24, 146.23, 146.23, 146.235, 146.24, 146.2321, 146.23, 146.2399, 146.23,
             146.22, 146.22, 146.2, 146.2087, 146.22, 146.23, 146.23, 146.225, 146.2283, 146.2283, 146.23, 146.26,
             146.26, 146.2611, 146.265, 146.275, 146.265, 146.275, 146.2799, 146.2799, 146.2712, 146.2701, 146.2701,
             146.2713, 146.27, 146.27, 146.27, 146.27, 146.28, 146.28, 146.28, 146.28, 146.2701, 146.2701, 146.29,
             146.305, 146.2953, 146.3005, 146.3099, 146.3001, 146.301, 146.3, 146.305, 146.294, 146.28, 146.2863, 146.28,
             146.28, 146.2717, 146.2701, 146.275, 146.28, 146.2817, 146.2817, 146.2898, 146.2898, 146.2821, 146.2821,
             146.3, 146.3081, 146.2907, 146.2991, 146.2991, 146.29, 146.29, 146.28, 146.28, 146.2737, 146.275, 146.28,
             146.2871, 146.2899, 146.28, 146.28, 146.28, 146.2799, 146.275, 146.275, 146.28, 146.28, 146.2901, 146.2901,
             146.3, 146.2901, 146.2901, 146.2901, 146.2983, 146.295, 146.295, 146.29, 146.29, 146.28, 146.28, 146.285,
             146.28, 146.285, 146.28, 146.28, 146.28, 146.27, 146.27, 146.275, 146.2769, 146.28, 146.2801, 146.29,
             146.29, 146.3, 146.3, 146.31, 146.33, 146.32, 146.32, 146.32, 146.3101, 146.32, 146.32, 146.3172, 146.32,
             146.3, 146.31, 146.3, 146.3, 146.3, 146.3002, 146.305, 146.305, 146.305, 146.315, 146.32, 146.325, 146.33,
             146.33, 146.325, 146.305, 146.31, 146.31, 146.315, 146.32, 146.33, 146.339, 146.335, 146.34, 146.335,
             146.34, 146.34, 146.3308, 146.335, 146.32, 146.31, 146.31, 146.32, 146.29, 146.2875, 146.2875, 146.2886,
             146.28, 146.25, 146.255, 146.2699, 146.25, 146.249, 146.2499, 146.2479, 146.25, 146.2407, 146.2412,
             146.2401, 146.245, 146.2385, 146.2446, 146.2446, 146.25, 146.26, 146.25, 146.24, 146.245, 146.245, 146.2409,
             146.255, 146.24, 146.245, 146.2491, 146.24, 146.2499, 146.2499, 146.26, 146.26, 146.265, 146.265, 146.26,
             146.255, 146.2573, 146.2501, 146.2501, 146.2501, 146.2501, 146.244, 146.25, 146.25, 146.25, 146.25,
             146.2512, 146.2512, 146.2612, 146.2675, 146.2675, 146.2599, 146.25, 146.25, 146.25, 146.25, 146.25, 146.245,
             146.25, 146.245, 146.21, 146.22, 146.22, 146.2199, 146.2199, 146.219, 146.22, 146.215, 146.22, 146.2288,
             146.22, 146.22, 146.2101, 146.2101, 146.2101, 146.2101, 146.2199, 146.21, 146.21, 146.21, 146.225, 146.235,
             146.235, 146.2414, 146.25, 146.245, 146.25, 146.23, 146.23, 146.23, 146.235, 146.23, 146.23, 146.23,
             146.225, 146.225, 146.225, 146.225, 146.225, 146.225, 146.2238, 146.225, 146.23, 146.23, 146.23, 146.22,
             146.22, 146.26, 146.24, 146.255, 146.25, 146.255, 146.255, 146.25, 146.25, 146.2501, 146.2501, 146.2524,
             146.255, 146.2534, 146.2534, 146.2564, 146.2564, 146.25, 146.255, 146.2516, 146.265, 146.285, 146.29,
             146.285, 146.285, 146.2999, 146.2975, 146.3006, 146.3006, 146.305, 146.3005, 146.31, 146.3099, 146.3017,
             146.31, 146.31, 146.303, 146.31, 146.31, 146.307, 146.28, 146.28, 146.29, 146.2892, 146.28, 146.28, 146.27,
             146.265, 146.3, 146.31, 146.31, 146.3101, 146.315, 146.315, 146.315, 146.315, 146.32, 146.3158, 146.3199,
             146.3199, 146.3299, 146.325, 146.325, 146.32, 146.325, 146.325, 146.3242, 146.3242, 146.3242, 146.3242,
             146.3242, 146.335, 146.3312, 146.335, 146.335, 146.335, 146.335, 146.33, 146.349, 146.325, 146.31, 146.33,
             146.33, 146.3219, 146.325, 146.326, 146.326, 146.325, 146.325, 146.3283, 146.3283, 146.305, 146.2914, 146.3,
             146.3032, 146.2991, 146.29, 146.295, 146.295, 146.2972, 146.28, 146.2704, 146.2704, 146.28, 146.275,
             146.275, 146.2525, 146.26, 146.28, 146.29, 146.29, 146.3, 146.3, 146.3, 146.3, 146.295, 146.29, 146.29,
             146.29, 146.2863, 146.2863, 146.2815, 146.2815, 146.2815, 146.2815, 146.289, 146.29, 146.29, 146.285,
             146.285, 146.28, 146.26, 146.295, 146.3071, 146.2908, 146.285, 146.285, 146.285, 146.28, 146.285, 146.28,
             146.27, 146.265, 146.25, 146.245, 146.25, 146.26, 146.26, 146.26, 146.26, 146.25, 146.25, 146.2599,
             146.2599, 146.2622, 146.265, 146.28, 146.2762, 146.25, 146.245, 146.245, 146.2499, 146.2499, 146.2499,
             146.25, 146.245, 146.245, 146.24, 146.24, 146.23, 146.21, 146.215, 146.21, 146.215, 146.208, 146.19,
             146.1927, 146.2, 146.2083, 146.21, 146.24, 146.215, 146.235, 146.235, 146.245, 146.245, 146.24, 146.245,
             146.26, 146.265, 146.26, 146.2599, 146.255, 146.2657, 146.2657, 146.2667, 146.265, 146.2613, 146.26,
             146.255, 146.255, 146.2573, 146.2573, 146.2573, 146.2573, 146.2573, 146.2573, 146.2573, 146.2599, 146.2568,
             146.255, 146.255, 146.24, 146.26, 146.27, 146.26, 146.265, 146.265, 146.265, 146.25, 146.265, 146.265,
             146.265, 146.265, 146.26, 146.26, 146.26, 146.26, 146.27, 146.2765, 146.27, 146.27, 146.27, 146.265, 146.27,
             146.27, 146.3, 146.3, 146.3, 146.2957, 146.298, 146.3, 146.3, 146.2914, 146.3, 146.28, 146.27, 146.27,
             146.275, 146.27, 146.259, 146.269, 146.2639, 146.26, 146.25, 146.2499, 146.245, 146.245, 146.24, 146.235,
             146.235, 146.235, 146.24, 146.24, 146.2499, 146.25, 146.25, 146.25, 146.245, 146.245, 146.245, 146.245,
             146.245, 146.245, 146.245, 146.245, 146.245, 146.25, 146.25, 146.2402, 146.25, 146.245, 146.24, 146.24,
             146.24, 146.24, 146.235, 146.235, 146.235, 146.24, 146.24, 146.2499, 146.2497, 146.2497, 146.2458, 146.2458,
             146.24, 146.235, 146.235, 146.235, 146.235, 146.235, 146.235, 146.23, 146.23, 146.23, 146.23, 146.22,
             146.22, 146.22, 146.23, 146.245, 146.245, 146.2599, 146.24, 146.24, 146.24, 146.24, 146.2422, 146.255,
             146.255, 146.255, 146.26, 146.26, 146.26, 146.265, 146.28, 146.2828, 146.2816, 146.2816, 146.29, 146.29,
             146.29, 146.2801, 146.2899, 146.29, 146.2923, 146.3, 146.3, 146.3, 146.2901, 146.2901, 146.3, 146.2979,
             146.295, 146.295, 146.3, 146.315, 146.3101, 146.3042, 146.309, 146.3013, 146.3, 146.3101, 146.3033, 146.305,
             146.3, 146.3, 146.3001, 146.3063, 146.31, 146.305, 146.305, 146.305, 146.3, 146.295, 146.295, 146.3021,
             146.3001, 146.3, 146.3, 146.3, 146.295, 146.2918, 146.29, 146.29, 146.29, 146.28, 146.285, 146.285, 146.28,
             146.28, 146.275, 146.275, 146.2788, 146.29, 146.2938, 146.2938, 146.31, 146.33, 146.33, 146.34, 146.3401,
             146.345, 146.3411, 146.3475, 146.345, 146.335, 146.335, 146.33, 146.33, 146.33, 146.33, 146.33, 146.32,
             146.32, 146.31, 146.295, 146.295, 146.3, 146.3, 146.3, 146.3, 146.3, 146.3, 146.3, 146.3, 146.3, 146.3017,
             146.305, 146.305, 146.305, 146.281, 146.28, 146.28, 146.28, 146.28, 146.28, 146.27, 146.27, 146.2778,
             146.2799, 146.275, 146.275, 146.275, 146.285, 146.32, 146.3, 146.3081, 146.305, 146.305, 146.3, 146.3,
             146.32, 146.32, 146.32, 146.33, 146.32, 146.32, 146.33, 146.325, 146.34, 146.3333, 146.33, 146.33, 146.34,
             146.34, 146.34, 146.34, 146.34, 146.34, 146.335, 146.34, 146.335, 146.335, 146.335, 146.3399, 146.333,
             146.333, 146.3354, 146.3354, 146.3354, 146.34, 146.34, 146.34, 146.34, 146.34, 146.335, 146.34, 146.335,
             146.335, 146.335, 146.335, 146.33, 146.33, 146.34, 146.3388, 146.3388, 146.35, 146.36, 146.355, 146.36,
             146.34, 146.33, 146.33, 146.33, 146.33, 146.335, 146.335, 146.34, 146.34, 146.34, 146.34, 146.345, 146.33,
             146.33, 146.3367, 146.338, 146.34, 146.34, 146.33, 146.33, 146.32, 146.32, 146.32, 146.305, 146.3003,
             146.31, 146.31, 146.29, 146.28, 146.28, 146.28, 146.2808, 146.2808, 146.28, 146.28, 146.295, 146.2948,
             146.2948, 146.3, 146.3, 146.285, 146.285, 146.285, 146.29, 146.29, 146.29, 146.29, 146.29, 146.275, 146.28,
             146.272, 146.2701, 146.2766, 146.27, 146.261, 146.2642, 146.25, 146.24, 146.24, 146.24, 146.235, 146.24,
             146.24, 146.235, 146.235, 146.235, 146.2411, 146.2471, 146.25, 146.25, 146.255, 146.255, 146.26, 146.2556,
             146.26, 146.26, 146.2544, 146.2544, 146.2544, 146.24, 146.245, 146.25, 146.25, 146.25, 146.258, 146.2555,
             146.25, 146.25, 146.23, 146.235, 146.235, 146.25, 146.24, 146.23, 146.225, 146.225, 146.2261, 146.225,
             146.2201, 146.2201, 146.2201, 146.215, 146.2199, 146.2199, 146.215, 146.215, 146.215, 146.215, 146.215,
             146.21, 146.2, 146.21, 146.215, 146.2225, 146.225, 146.225, 146.23, 146.23, 146.23, 146.2312, 146.2399,
             146.2399, 146.21, 146.2, 146.22, 146.22, 146.215, 146.215, 146.215, 146.21, 146.2, 146.2041, 146.205,
             146.195, 146.195, 146.1984, 146.2062, 146.2062, 146.1901, 146.195, 146.195, 146.195, 146.19, 146.195,
             146.195, 146.1901, 146.2, 146.185, 146.18, 146.18, 146.18, 146.2, 146.195, 146.2099, 146.2029, 146.2029,
             146.2029, 146.21, 146.23, 146.23, 146.225, 146.23, 146.23, 146.22, 146.22, 146.23, 146.22, 146.225, 146.23,
             146.23, 146.23, 146.221, 146.21, 146.21, 146.2, 146.21, 146.21, 146.2089, 146.2089, 146.2089, 146.205,
             146.205, 146.21, 146.22, 146.23, 146.23, 146.23, 146.22, 146.22, 146.22, 146.22, 146.23, 146.2301, 146.2399,
             146.2399, 146.2317, 146.23, 146.22, 146.22, 146.2199, 146.2199, 146.2199, 146.2199, 146.215, 146.2, 146.211,
             146.21, 146.21, 146.2, 146.2, 146.2, 146.2082, 146.2, 146.205, 146.2086, 146.2015, 146.2015, 146.2015,
             146.2067, 146.2, 146.2, 146.2, 146.2, 146.2, 146.195, 146.195, 146.195, 146.195, 146.195, 146.2, 146.205,
             146.2099, 146.2099, 146.225, 146.24, 146.226, 146.23, 146.23, 146.25, 146.24, 146.24, 146.245, 146.23,
             146.22, 146.235, 146.2227, 146.2227, 146.224, 146.224, 146.224, 146.23, 146.23, 146.23, 146.24, 146.24,
             146.24, 146.24, 146.24, 146.23, 146.23, 146.23, 146.23, 146.23, 146.23, 146.23, 146.23, 146.23, 146.23,
             146.22, 146.22, 146.22, 146.21, 146.22, 146.215, 146.21, 146.21, 146.2208, 146.2246, 146.2246, 146.225,
             146.225, 146.2, 146.205, 146.1935, 146.19, 146.195, 146.195, 146.185, 146.185, 146.19, 146.18, 146.18,
             146.18, 146.182, 146.185, 146.185, 146.185, 146.165, 146.16, 146.155, 146.1593, 146.165, 146.16, 146.16,
             146.1575, 146.155, 146.1502, 146.1599, 146.1575, 146.1599, 146.15, 146.1515, 146.1557, 146.1557, 146.1529,
             146.1529, 146.155, 146.1527, 146.1527, 146.1529, 146.1529, 146.1529, 146.17, 146.165, 146.1678, 146.18,
             146.2011, 146.199, 146.1964, 146.1964, 146.2099, 146.2109, 146.2113, 146.2199, 146.22, 146.23, 146.2306,
             146.2224, 146.22, 146.22, 146.22, 146.22, 146.22, 146.22, 146.2201, 146.22, 146.215, 146.215, 146.217,
             146.205, 146.19, 146.1928, 146.2, 146.21, 146.2064, 146.2, 146.2, 146.21, 146.21, 146.215, 146.215, 146.215,
             146.205, 146.205, 146.205, 146.22, 146.22, 146.2169, 146.22, 146.225, 146.23, 146.24, 146.2317, 146.24,
             146.25, 146.24, 146.25, 146.24, 146.26, 146.2566, 146.251, 146.251, 146.25, 146.26, 146.2501, 146.28,
             146.266, 146.265, 146.265, 146.265, 146.2699, 146.2411, 146.245, 146.245, 146.245, 146.2584, 146.27,
             146.275, 146.2704, 146.28, 146.275, 146.28, 146.27, 146.275, 146.28, 146.28, 146.285, 146.286, 146.286,
             146.2895, 146.28, 146.28, 146.285, 146.285, 146.2809, 146.27, 146.27, 146.3, 146.3, 146.3099, 146.305,
             146.305, 146.2969, 146.2969, 146.295, 146.292, 146.305, 146.302, 146.305, 146.31, 146.315, 146.315, 146.315,
             146.3001, 146.3, 146.305, 146.3, 146.305, 146.305, 146.3, 146.3001, 146.295, 146.2942, 146.2942, 146.2719,
             146.2719, 146.27, 146.25, 146.2588, 146.2639, 146.275, 146.28, 146.28, 146.285, 146.285, 146.275, 146.2742,
             146.27, 146.275, 146.275, 146.275, 146.27, 146.2689, 146.255, 146.25, 146.245, 146.245, 146.2111, 146.2199,
             146.215, 146.2173, 146.22, 146.24, 146.22, 146.2008, 146.21, 146.22, 146.215, 146.215, 146.215, 146.2166,
             146.205, 146.205, 146.1901, 146.1801, 146.155, 146.165, 146.175, 146.18, 146.179, 146.18, 146.1701, 146.21,
             146.2167, 146.2184, 146.2289, 146.23, 146.23, 146.23, 146.23, 146.24, 146.2499, 146.2401, 146.25, 146.2501,
             146.25, 146.25, 146.2581, 146.26, 146.26, 146.2511, 146.25, 146.25, 146.25, 146.2402, 146.24, 146.2501,
             146.25, 146.25, 146.25, 146.25, 146.26, 146.26, 146.255, 146.26, 146.26, 146.26, 146.255, 146.26, 146.28,
             146.28, 146.285, 146.295, 146.3, 146.3, 146.3, 146.305, 146.329, 146.33, 146.355, 146.3601, 146.3611,
             146.385, 146.385, 146.3893, 146.4, 146.415, 146.4, 146.4, 146.3927, 146.405, 146.4, 146.405, 146.405,
             146.415, 146.4117, 146.4001, 146.385, 146.385, 146.3804, 146.3813, 146.385, 146.375, 146.385, 146.38,
             146.3808, 146.385, 146.385, 146.375, 146.375, 146.375, 146.375, 146.36, 146.35, 146.36, 146.3699, 146.365,
             146.37, 146.37, 146.37, 146.37, 146.38, 146.395, 146.399, 146.4, 146.4034, 146.3978, 146.3912, 146.3901,
             146.3832, 146.3832, 146.385, 146.3865, 146.3833, 146.38, 146.375, 146.3709, 146.37, 146.355, 146.355,
             146.3692, 146.3621, 146.3621, 146.3687, 146.37, 146.375, 146.37, 146.36, 146.36, 146.35, 146.3509, 146.365,
             146.3699, 146.3516, 146.3516, 146.3516, 146.3471, 146.3471, 146.3409, 146.3409, 146.3329, 146.3329,
             146.3315, 146.34, 146.345, 146.3332, 146.35, 146.37, 146.3755, 146.36, 146.35, 146.3516, 146.3516, 146.345,
             146.345, 146.345, 146.335, 146.34, 146.34, 146.335, 146.335, 146.34, 146.3611, 146.3611, 146.375, 146.3689,
             146.3689, 146.3689, 146.3689, 146.3524, 146.3524, 146.3524, 146.355, 146.375, 146.375, 146.38, 146.39,
             146.3841, 146.38, 146.375, 146.37, 146.37, 146.37, 146.375, 146.375, 146.37, 146.38, 146.38, 146.38, 146.38,
             146.38, 146.38, 146.375, 146.39, 146.3895, 146.39, 146.37, 146.37, 146.37, 146.38, 146.38, 146.3703,
             146.365, 146.37, 146.3771, 146.3701, 146.375, 146.38, 146.385, 146.395, 146.395, 146.4099, 146.42, 146.4101,
             146.42, 146.42, 146.43, 146.44, 146.45, 146.44, 146.4199, 146.4299, 146.4364, 146.445, 146.44, 146.44,
             146.44, 146.435, 146.425, 146.42, 146.425, 146.425, 146.425, 146.44, 146.445, 146.4359, 146.435, 146.4499,
             146.4499, 146.431, 146.435, 146.44, 146.43, 146.432, 146.44, 146.44, 146.44, 146.445, 146.44, 146.42,
             146.425, 146.425, 146.42, 146.43, 146.4249, 146.43, 146.43, 146.43, 146.4301, 146.4399, 146.47, 146.465,
             146.46, 146.4639, 146.48, 146.47, 146.47, 146.48, 146.5, 146.5, 146.4971, 146.495, 146.5044, 146.504,
             146.5041, 146.505, 146.505, 146.5055, 146.5054, 146.5, 146.4922, 146.495, 146.495, 146.51, 146.5006, 146.51,
             146.51, 146.525, 146.525, 146.53, 146.545, 146.55, 146.5401, 146.5301, 146.5333, 146.53, 146.53, 146.53,
             146.55, 146.56, 146.55, 146.545, 146.545, 146.545, 146.545, 146.54, 146.545, 146.5446, 146.54, 146.53,
             146.525, 146.52, 146.5272, 146.525, 146.525, 146.535, 146.5245, 146.5201, 146.53, 146.5154, 146.515,
             146.5199, 146.5199, 146.505, 146.5194, 146.52, 146.52, 146.515, 146.52, 146.51, 146.5101, 146.5, 146.51,
             146.51, 146.52, 146.51, 146.51, 146.51, 146.53, 146.5241, 146.532, 146.53, 146.535, 146.535, 146.535,
             146.535, 146.53, 146.529, 146.528, 146.5216, 146.52, 146.525, 146.5201, 146.5201, 146.52, 146.52, 146.515,
             146.51, 146.5117, 146.5119, 146.5119, 146.515, 146.52, 146.53, 146.53, 146.54, 146.5439, 146.555, 146.55,
             146.5592, 146.555, 146.555, 146.555, 146.55, 146.55, 146.5403, 146.5418, 146.54, 146.52, 146.5301, 146.535,
             146.5401, 146.55, 146.54, 146.545, 146.545, 146.54, 146.54, 146.5451, 146.5451, 146.5451, 146.545, 146.54,
             146.54, 146.54, 146.5399, 146.535, 146.535, 146.535, 146.5377, 146.55, 146.55, 146.555, 146.555, 146.5587,
             146.58, 146.5789, 146.5789, 146.58, 146.576, 146.576, 146.576, 146.575, 146.5874, 146.5814, 146.5814,
             146.5846, 146.57, 146.56, 146.56, 146.57, 146.57, 146.58, 146.58, 146.5801, 146.62, 146.64, 146.62, 146.635,
             146.63, 146.63, 146.61, 146.6209, 146.6228, 146.6201, 146.63, 146.62, 146.62, 146.615, 146.6199, 146.61,
             146.6199, 146.615, 146.62, 146.625, 146.625, 146.6253, 146.625, 146.62, 146.62, 146.6383, 146.625, 146.635,
             146.6448, 146.65, 146.65, 146.65, 146.6488, 146.66, 146.65, 146.645, 146.6509, 146.645, 146.65, 146.6501,
             146.668, 146.6707, 146.6801, 146.6814, 146.685, 146.7, 146.71, 146.72, 146.72, 146.75, 146.73, 146.735,
             146.7257, 146.72, 146.715, 146.71, 146.7139, 146.7118, 146.72, 146.72, 146.73, 146.7277, 146.705, 146.71,
             146.71, 146.7009, 146.705, 146.7026, 146.7, 146.6995]
bullshit2 = [146.69,
146.65,
146.66,
146.66,
146.685,
146.71,
146.71,
146.67,
146.69,
146.73,
146.72,
146.72,
146.725,
146.75,
146.75,
146.73,
146.705,
146.73,
146.735,
146.7475,
146.78,
146.765,
146.76,
146.77,
146.76,
146.7,
146.71,
146.675,
146.71,
146.68,
146.625,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63,
146.63, ]
data, average_data = [], []
buys, sells = [], []
pl_data = []

# plt.style.use('fivethirtyeight')
# plt.rcParams['animation.html'] = 'jshtml'
fig, ax = plt.subplots(2, 1, figsize=(16, 9), gridspec_kw={'height_ratios': [5, 2]})
fig.show()
# fig.canvas.draw()
# %matplotlib notebook

for i in range(periods):
    iteration += 1
    # time.sleep(1)
    print(f'Iteration: {iteration}')

    # current_time = dt.datetime.now().strftime('%H:%M:%S')
    # current_price = functions.streamPrice(ticker, key)
    current_time = iteration
    current_price = bullshit1[iteration - 1]
    data.append([current_time, current_price])
    # data = data[-scale:]

    average = functions.streamAverage(data, average_length)
    average_data.append(average)
    # average_data = average_data[-scale:]

    ax.plot([time[0] for time in data], [price[1] for price in data], color='black')
    ax.plot(average_data)
    fig.canvas.draw()
    fig.canvas.flush_events()
    ax.set_xlim(left=max(0, i - 50), right=i + 50)

    if iteration > average_length and current_price > average and in_position is False:
        # functions.buy(ticker, key)
        buys.append([current_time, current_price])
        checkpoint = pl
        current_position = current_price
        in_position = True

    elif iteration > average_length and average >= current_price and in_position is True:
        # functions.sell(ticker, key)
        sells.append([current_time, current_price])
        pl = checkpoint + pl
        in_position = False

    elif iteration == periods and in_position is True:
        in_position = False
        pl_data.append([current_time, checkpoint + pl])
        sells.append([current_time, current_price])
        break

    if in_position is True:
        pl = current_price - current_position
        pl_data.append([current_time, checkpoint + pl])

    elif in_position is False:
        pl_data.append([current_time, pl])

    # pl_data = pl_data[-scale:]

    # plt.subplot(2, 1, 1)
    # ax[0].plot([time[0] for time in data], [price[1] for price in data], color='black', label='Price', zorder=1)
    # ax[0].plot([time[0] for time in data], average_data, color='coral', label=f'Average ({average_length} periods)', zorder=1)
    # # for item in buys:
    # #     # plt.scatter(item[0], item[1], color='white', s=600, marker='^', zorder=2)
    # #     plt.scatter(item[0], item[1], color='green', s=200, marker='^', zorder=3)
    # #     plt.axvline(x=item[0], color='green', linewidth=1, zorder=1)
    # # for item in sells:
    # #     # plt.scatter(item[0], item[1], color='white', s=600, marker='v', zorder=2)
    # #     plt.scatter(item[0], item[1], color='darkred', s=200, marker='v', zorder=3)
    # #     plt.axvline(x=item[0], color='red', linewidth=1, zorder=1)
    # if pl > 0:
    #     plt.title(f'Profit / Loss: ${pl}', fontweight='bold', color='lime')
    # else:
    #     plt.title(f'Profit / Loss: ${pl}', fontweight='bold', color='red')
    # plt.xticks(np.arange(0, iteration, (len(data) / 10)))
    # plt.suptitle(f'Simple Moving Average Strategy: {ticker} over {periods} seconds', fontweight='bold')
    # plt.grid(axis='y')
    # plt.ylabel('Price ($)')
    # plt.legend()
    #
    # plt.subplot(2, 1, 2)
    # ax[1].plot([time[0] for time in data], [data[1] for data in pl_data1])
    # # for item in buys:
    # #     plt.axvline(x=item[0], color='green', linewidth=1, zorder=1)
    # # for item in sells:
    # #     plt.axvline(x=item[0], color='red', linewidth=1, zorder=1)
    # plt.xticks(np.arange(0, iteration, (len(data) / 10)))
    # plt.grid(axis='y')
    # plt.xlabel('Time')
    # plt.ylabel('Profit / Loss ($) (Sorta)')
    #
    # fig.canvas.draw()
    # fig.canvas.flush_events()
    # plt.pause(0.01)
    # fig.canvas.update()

plt.close()

plt.subplot(2, 1, 1)
ax[0].plot([time[0] for time in data], [price[1] for price in data], color='black', label='Price', zorder=1)
ax[0].plot([time[0] for time in data], average_data, color='coral', label=f'Average ({average_length} periods)', zorder=1)
# for item in buys:
#     # plt.scatter(item[0], item[1], color='white', s=600, marker='^', zorder=2)
#     plt.scatter(item[0], item[1], color='green', s=200, marker='^', zorder=3)
#     plt.axvline(x=item[0], color='green', linewidth=1, zorder=1)
# for item in sells:
#     # plt.scatter(item[0], item[1], color='white', s=600, marker='v', zorder=2)
#     plt.scatter(item[0], item[1], color='darkred', s=200, marker='v', zorder=3)
#     plt.axvline(x=item[0], color='red', linewidth=1, zorder=1)
if pl > 0:
    plt.title(f'Profit / Loss: ${pl}', fontweight='bold', color='lime')
else:
    plt.title(f'Profit / Loss: ${pl}', fontweight='bold', color='red')
# plt.xticks(np.arange(0, iteration, (len(data) / 10)))
plt.suptitle(f'Simple Moving Average Strategy: {ticker} over {periods} seconds', fontweight='bold')
plt.grid(axis='y')
plt.ylabel('Price ($)')
plt.legend()

plt.subplot(2, 1, 2)
for i in range(50):
    ax[1].plot([time[0] for time in data], [data[1] for data in pl_data])
# for item in buys:
#     plt.axvline(x=item[0], color='green', linewidth=1, zorder=1)
# for item in sells:
#     plt.axvline(x=item[0], color='red', linewidth=1, zorder=1)
# plt.xticks(np.arange(0, iteration, (len(data) / 10)))
plt.grid(axis='y')
plt.xlabel('Time')
plt.ylabel('Profit / Loss ($) (Sorta)')

plt.show()

--------------------------------------------------------
[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[{LOWKEY FINAL AVERAGE SCALPER]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
import functions
import time
import matplotlib.pyplot as plt

key = functions.authenticate()
ticker = functions.chooseStock()[0]

periods = 1000
scale = 40
average_length = 20
order_size = 1
safety = True

in_position, current_position, pl, checkpoint = False, 0, 0, 0
bullshit1 = [146.31, 146.31, 146.305, 146.3, 146.295, 146.3, 146.33, 146.3379, 146.326, 146.325, 146.325, 146.32,
             146.3183, 146.325, 146.325, 146.325, 146.325, 146.325, 146.32, 146.32, 146.32, 146.312, 146.315, 146.3001,
             146.31, 146.3, 146.3, 146.305, 146.3, 146.2999, 146.29, 146.29, 146.29, 146.29, 146.285, 146.275, 146.275,
             146.28, 146.28, 146.28, 146.28, 146.2799, 146.2799, 146.2799, 146.27, 146.27, 146.26, 146.265, 146.2599,
             146.2599, 146.255, 146.249, 146.245, 146.25, 146.265, 146.275, 146.275, 146.275, 146.275, 146.2782,
             146.2739, 146.28, 146.29, 146.292, 146.29, 146.288, 146.2885, 146.2885, 146.2799, 146.2799, 146.2799,
             146.28, 146.2897, 146.2897, 146.28, 146.28, 146.28, 146.28, 146.2912, 146.295, 146.29, 146.2914, 146.2914,
             146.2914, 146.2974, 146.295, 146.295, 146.295, 146.295, 146.29, 146.29, 146.28, 146.2791, 146.2791, 146.28,
             146.2822, 146.2857, 146.2801, 146.2801, 146.2801, 146.2801, 146.28, 146.2699, 146.27, 146.28, 146.27,
             146.2799, 146.27, 146.265, 146.265, 146.2595, 146.265, 146.265, 146.2507, 146.255, 146.2501, 146.255,
             146.255, 146.27, 146.27, 146.281, 146.28, 146.286, 146.28, 146.2739, 146.2739, 146.2739, 146.2757, 146.2701,
             146.27, 146.26, 146.255, 146.2529, 146.26, 146.2599, 146.2599, 146.26, 146.2699, 146.265, 146.26, 146.27,
             146.27, 146.27, 146.28, 146.29, 146.2961, 146.2961, 146.2961, 146.3, 146.3, 146.3, 146.3, 146.29, 146.28,
             146.2701, 146.275, 146.275, 146.275, 146.275, 146.27, 146.27, 146.255, 146.255, 146.255, 146.2518, 146.2518,
             146.2518, 146.2556, 146.27, 146.28, 146.28, 146.2873, 146.2801, 146.275, 146.2712, 146.2712, 146.2712,
             146.2712, 146.2712, 146.265, 146.265, 146.265, 146.265, 146.265, 146.255, 146.26, 146.27, 146.27, 146.27,
             146.27, 146.25, 146.23, 146.2386, 146.2385, 146.2385, 146.235, 146.235, 146.235, 146.24, 146.24, 146.2391,
             146.235, 146.2228, 146.21, 146.2, 146.208, 146.21, 146.2114, 146.215, 146.215, 146.215, 146.21, 146.205,
             146.2062, 146.2062, 146.2029, 146.205, 146.195, 146.1879, 146.185, 146.16, 146.155, 146.16, 146.1683,
             146.155, 146.18, 146.1912, 146.2, 146.195, 146.205, 146.2101, 146.22, 146.22, 146.2209, 146.225, 146.2299,
             146.2332, 146.23, 146.2399, 146.2399, 146.2399, 146.225, 146.24, 146.24, 146.2453, 146.2401, 146.2401,
             146.2401, 146.2401, 146.24, 146.24, 146.245, 146.24, 146.245, 146.245, 146.24, 146.245, 146.2402, 146.2411,
             146.2411, 146.24, 146.225, 146.24, 146.23, 146.23, 146.235, 146.24, 146.2321, 146.23, 146.2399, 146.23,
             146.22, 146.22, 146.2, 146.2087, 146.22, 146.23, 146.23, 146.225, 146.2283, 146.2283, 146.23, 146.26,
             146.26, 146.2611, 146.265, 146.275, 146.265, 146.275, 146.2799, 146.2799, 146.2712, 146.2701, 146.2701,
             146.2713, 146.27, 146.27, 146.27, 146.27, 146.28, 146.28, 146.28, 146.28, 146.2701, 146.2701, 146.29,
             146.305, 146.2953, 146.3005, 146.3099, 146.3001, 146.301, 146.3, 146.305, 146.294, 146.28, 146.2863, 146.28,
             146.28, 146.2717, 146.2701, 146.275, 146.28, 146.2817, 146.2817, 146.2898, 146.2898, 146.2821, 146.2821,
             146.3, 146.3081, 146.2907, 146.2991, 146.2991, 146.29, 146.29, 146.28, 146.28, 146.2737, 146.275, 146.28,
             146.2871, 146.2899, 146.28, 146.28, 146.28, 146.2799, 146.275, 146.275, 146.28, 146.28, 146.2901, 146.2901,
             146.3, 146.2901, 146.2901, 146.2901, 146.2983, 146.295, 146.295, 146.29, 146.29, 146.28, 146.28, 146.285,
             146.28, 146.285, 146.28, 146.28, 146.28, 146.27, 146.27, 146.275, 146.2769, 146.28, 146.2801, 146.29,
             146.29, 146.3, 146.3, 146.31, 146.33, 146.32, 146.32, 146.32, 146.3101, 146.32, 146.32, 146.3172, 146.32,
             146.3, 146.31, 146.3, 146.3, 146.3, 146.3002, 146.305, 146.305, 146.305, 146.315, 146.32, 146.325, 146.33,
             146.33, 146.325, 146.305, 146.31, 146.31, 146.315, 146.32, 146.33, 146.339, 146.335, 146.34, 146.335,
             146.34, 146.34, 146.3308, 146.335, 146.32, 146.31, 146.31, 146.32, 146.29, 146.2875, 146.2875, 146.2886,
             146.28, 146.25, 146.255, 146.2699, 146.25, 146.249, 146.2499, 146.2479, 146.25, 146.2407, 146.2412,
             146.2401, 146.245, 146.2385, 146.2446, 146.2446, 146.25, 146.26, 146.25, 146.24, 146.245, 146.245, 146.2409,
             146.255, 146.24, 146.245, 146.2491, 146.24, 146.2499, 146.2499, 146.26, 146.26, 146.265, 146.265, 146.26,
             146.255, 146.2573, 146.2501, 146.2501, 146.2501, 146.2501, 146.244, 146.25, 146.25, 146.25, 146.25,
             146.2512, 146.2512, 146.2612, 146.2675, 146.2675, 146.2599, 146.25, 146.25, 146.25, 146.25, 146.25, 146.245,
             146.25, 146.245, 146.21, 146.22, 146.22, 146.2199, 146.2199, 146.219, 146.22, 146.215, 146.22, 146.2288,
             146.22, 146.22, 146.2101, 146.2101, 146.2101, 146.2101, 146.2199, 146.21, 146.21, 146.21, 146.225, 146.235,
             146.235, 146.2414, 146.25, 146.245, 146.25, 146.23, 146.23, 146.23, 146.235, 146.23, 146.23, 146.23,
             146.225, 146.225, 146.225, 146.225, 146.225, 146.225, 146.2238, 146.225, 146.23, 146.23, 146.23, 146.22,
             146.22, 146.26, 146.24, 146.255, 146.25, 146.255, 146.255, 146.25, 146.25, 146.2501, 146.2501, 146.2524,
             146.255, 146.2534, 146.2534, 146.2564, 146.2564, 146.25, 146.255, 146.2516, 146.265, 146.285, 146.29,
             146.285, 146.285, 146.2999, 146.2975, 146.3006, 146.3006, 146.305, 146.3005, 146.31, 146.3099, 146.3017,
             146.31, 146.31, 146.303, 146.31, 146.31, 146.307, 146.28, 146.28, 146.29, 146.2892, 146.28, 146.28, 146.27,
             146.265, 146.3, 146.31, 146.31, 146.3101, 146.315, 146.315, 146.315, 146.315, 146.32, 146.3158, 146.3199,
             146.3199, 146.3299, 146.325, 146.325, 146.32, 146.325, 146.325, 146.3242, 146.3242, 146.3242, 146.3242,
             146.3242, 146.335, 146.3312, 146.335, 146.335, 146.335, 146.335, 146.33, 146.349, 146.325, 146.31, 146.33,
             146.33, 146.3219, 146.325, 146.326, 146.326, 146.325, 146.325, 146.3283, 146.3283, 146.305, 146.2914, 146.3,
             146.3032, 146.2991, 146.29, 146.295, 146.295, 146.2972, 146.28, 146.2704, 146.2704, 146.28, 146.275,
             146.275, 146.2525, 146.26, 146.28, 146.29, 146.29, 146.3, 146.3, 146.3, 146.3, 146.295, 146.29, 146.29,
             146.29, 146.2863, 146.2863, 146.2815, 146.2815, 146.2815, 146.2815, 146.289, 146.29, 146.29, 146.285,
             146.285, 146.28, 146.26, 146.295, 146.3071, 146.2908, 146.285, 146.285, 146.285, 146.28, 146.285, 146.28,
             146.27, 146.265, 146.25, 146.245, 146.25, 146.26, 146.26, 146.26, 146.26, 146.25, 146.25, 146.2599,
             146.2599, 146.2622, 146.265, 146.28, 146.2762, 146.25, 146.245, 146.245, 146.2499, 146.2499, 146.2499,
             146.25, 146.245, 146.245, 146.24, 146.24, 146.23, 146.21, 146.215, 146.21, 146.215, 146.208, 146.19,
             146.1927, 146.2, 146.2083, 146.21, 146.24, 146.215, 146.235, 146.235, 146.245, 146.245, 146.24, 146.245,
             146.26, 146.265, 146.26, 146.2599, 146.255, 146.2657, 146.2657, 146.2667, 146.265, 146.2613, 146.26,
             146.255, 146.255, 146.2573, 146.2573, 146.2573, 146.2573, 146.2573, 146.2573, 146.2573, 146.2599, 146.2568,
             146.255, 146.255, 146.24, 146.26, 146.27, 146.26, 146.265, 146.265, 146.265, 146.25, 146.265, 146.265,
             146.265, 146.265, 146.26, 146.26, 146.26, 146.26, 146.27, 146.2765, 146.27, 146.27, 146.27, 146.265, 146.27,
             146.27, 146.3, 146.3, 146.3, 146.2957, 146.298, 146.3, 146.3, 146.2914, 146.3, 146.28, 146.27, 146.27,
             146.275, 146.27, 146.259, 146.269, 146.2639, 146.26, 146.25, 146.2499, 146.245, 146.245, 146.24, 146.235,
             146.235, 146.235, 146.24, 146.24, 146.2499, 146.25, 146.25, 146.25, 146.245, 146.245, 146.245, 146.245,
             146.245, 146.245, 146.245, 146.245, 146.245, 146.25, 146.25, 146.2402, 146.25, 146.245, 146.24, 146.24,
             146.24, 146.24, 146.235, 146.235, 146.235, 146.24, 146.24, 146.2499, 146.2497, 146.2497, 146.2458, 146.2458,
             146.24, 146.235, 146.235, 146.235, 146.235, 146.235, 146.235, 146.23, 146.23, 146.23, 146.23, 146.22,
             146.22, 146.22, 146.23, 146.245, 146.245, 146.2599, 146.24, 146.24, 146.24, 146.24, 146.2422, 146.255,
             146.255, 146.255, 146.26, 146.26, 146.26, 146.265, 146.28, 146.2828, 146.2816, 146.2816, 146.29, 146.29,
             146.29, 146.2801, 146.2899, 146.29, 146.2923, 146.3, 146.3, 146.3, 146.2901, 146.2901, 146.3, 146.2979,
             146.295, 146.295, 146.3, 146.315, 146.3101, 146.3042, 146.309, 146.3013, 146.3, 146.3101, 146.3033, 146.305,
             146.3, 146.3, 146.3001, 146.3063, 146.31, 146.305, 146.305, 146.305, 146.3, 146.295, 146.295, 146.3021,
             146.3001, 146.3, 146.3, 146.3, 146.295, 146.2918, 146.29, 146.29, 146.29, 146.28, 146.285, 146.285, 146.28,
             146.28, 146.275, 146.275, 146.2788, 146.29, 146.2938, 146.2938, 146.31, 146.33, 146.33, 146.34, 146.3401,
             146.345, 146.3411, 146.3475, 146.345, 146.335, 146.335, 146.33, 146.33, 146.33, 146.33, 146.33, 146.32,
             146.32, 146.31, 146.295, 146.295, 146.3, 146.3, 146.3, 146.3, 146.3, 146.3, 146.3, 146.3, 146.3, 146.3017,
             146.305, 146.305, 146.305, 146.281, 146.28, 146.28, 146.28, 146.28, 146.28, 146.27, 146.27, 146.2778,
             146.2799, 146.275, 146.275, 146.275, 146.285, 146.32, 146.3, 146.3081, 146.305, 146.305, 146.3, 146.3,
             146.32, 146.32, 146.32, 146.33, 146.32, 146.32, 146.33, 146.325, 146.34, 146.3333, 146.33, 146.33, 146.34,
             146.34, 146.34, 146.34, 146.34, 146.34, 146.335, 146.34, 146.335, 146.335, 146.335, 146.3399, 146.333,
             146.333, 146.3354, 146.3354, 146.3354, 146.34, 146.34, 146.34, 146.34, 146.34, 146.335, 146.34, 146.335,
             146.335, 146.335, 146.335, 146.33, 146.33, 146.34, 146.3388, 146.3388, 146.35, 146.36, 146.355, 146.36,
             146.34, 146.33, 146.33, 146.33, 146.33, 146.335, 146.335, 146.34, 146.34, 146.34, 146.34, 146.345, 146.33,
             146.33, 146.3367, 146.338, 146.34, 146.34, 146.33, 146.33, 146.32, 146.32, 146.32, 146.305, 146.3003,
             146.31, 146.31, 146.29, 146.28, 146.28, 146.28, 146.2808, 146.2808, 146.28, 146.28, 146.295, 146.2948,
             146.2948, 146.3, 146.3, 146.285, 146.285, 146.285, 146.29, 146.29, 146.29, 146.29, 146.29, 146.275, 146.28,
             146.272, 146.2701, 146.2766, 146.27, 146.261, 146.2642, 146.25, 146.24, 146.24, 146.24, 146.235, 146.24,
             146.24, 146.235, 146.235, 146.235, 146.2411, 146.2471, 146.25, 146.25, 146.255, 146.255, 146.26, 146.2556,
             146.26, 146.26, 146.2544, 146.2544, 146.2544, 146.24, 146.245, 146.25, 146.25, 146.25, 146.258, 146.2555,
             146.25, 146.25, 146.23, 146.235, 146.235, 146.25, 146.24, 146.23, 146.225, 146.225, 146.2261, 146.225,
             146.2201, 146.2201, 146.2201, 146.215, 146.2199, 146.2199, 146.215, 146.215, 146.215, 146.215, 146.215,
             146.21, 146.2, 146.21, 146.215, 146.2225, 146.225, 146.225, 146.23, 146.23, 146.23, 146.2312, 146.2399,
             146.2399, 146.21, 146.2, 146.22, 146.22, 146.215, 146.215, 146.215, 146.21, 146.2, 146.2041, 146.205,
             146.195, 146.195, 146.1984, 146.2062, 146.2062, 146.1901, 146.195, 146.195, 146.195, 146.19, 146.195,
             146.195, 146.1901, 146.2, 146.185, 146.18, 146.18, 146.18, 146.2, 146.195, 146.2099, 146.2029, 146.2029,
             146.2029, 146.21, 146.23, 146.23, 146.225, 146.23, 146.23, 146.22, 146.22, 146.23, 146.22, 146.225, 146.23,
             146.23, 146.23, 146.221, 146.21, 146.21, 146.2, 146.21, 146.21, 146.2089, 146.2089, 146.2089, 146.205,
             146.205, 146.21, 146.22, 146.23, 146.23, 146.23, 146.22, 146.22, 146.22, 146.22, 146.23, 146.2301, 146.2399,
             146.2399, 146.2317, 146.23, 146.22, 146.22, 146.2199, 146.2199, 146.2199, 146.2199, 146.215, 146.2, 146.211,
             146.21, 146.21, 146.2, 146.2, 146.2, 146.2082, 146.2, 146.205, 146.2086, 146.2015, 146.2015, 146.2015,
             146.2067, 146.2, 146.2, 146.2, 146.2, 146.2, 146.195, 146.195, 146.195, 146.195, 146.195, 146.2, 146.205,
             146.2099, 146.2099, 146.225, 146.24, 146.226, 146.23, 146.23, 146.25, 146.24, 146.24, 146.245, 146.23,
             146.22, 146.235, 146.2227, 146.2227, 146.224, 146.224, 146.224, 146.23, 146.23, 146.23, 146.24, 146.24,
             146.24, 146.24, 146.24, 146.23, 146.23, 146.23, 146.23, 146.23, 146.23, 146.23, 146.23, 146.23, 146.23,
             146.22, 146.22, 146.22, 146.21, 146.22, 146.215, 146.21, 146.21, 146.2208, 146.2246, 146.2246, 146.225,
             146.225, 146.2, 146.205, 146.1935, 146.19, 146.195, 146.195, 146.185, 146.185, 146.19, 146.18, 146.18,
             146.18, 146.182, 146.185, 146.185, 146.185, 146.165, 146.16, 146.155, 146.1593, 146.165, 146.16, 146.16,
             146.1575, 146.155, 146.1502, 146.1599, 146.1575, 146.1599, 146.15, 146.1515, 146.1557, 146.1557, 146.1529,
             146.1529, 146.155, 146.1527, 146.1527, 146.1529, 146.1529, 146.1529, 146.17, 146.165, 146.1678, 146.18,
             146.2011, 146.199, 146.1964, 146.1964, 146.2099, 146.2109, 146.2113, 146.2199, 146.22, 146.23, 146.2306,
             146.2224, 146.22, 146.22, 146.22, 146.22, 146.22, 146.22, 146.2201, 146.22, 146.215, 146.215, 146.217,
             146.205, 146.19, 146.1928, 146.2, 146.21, 146.2064, 146.2, 146.2, 146.21, 146.21, 146.215, 146.215, 146.215,
             146.205, 146.205, 146.205, 146.22, 146.22, 146.2169, 146.22, 146.225, 146.23, 146.24, 146.2317, 146.24,
             146.25, 146.24, 146.25, 146.24, 146.26, 146.2566, 146.251, 146.251, 146.25, 146.26, 146.2501, 146.28,
             146.266, 146.265, 146.265, 146.265, 146.2699, 146.2411, 146.245, 146.245, 146.245, 146.2584, 146.27,
             146.275, 146.2704, 146.28, 146.275, 146.28, 146.27, 146.275, 146.28, 146.28, 146.285, 146.286, 146.286,
             146.2895, 146.28, 146.28, 146.285, 146.285, 146.2809, 146.27, 146.27, 146.3, 146.3, 146.3099, 146.305,
             146.305, 146.2969, 146.2969, 146.295, 146.292, 146.305, 146.302, 146.305, 146.31, 146.315, 146.315, 146.315,
             146.3001, 146.3, 146.305, 146.3, 146.305, 146.305, 146.3, 146.3001, 146.295, 146.2942, 146.2942, 146.2719,
             146.2719, 146.27, 146.25, 146.2588, 146.2639, 146.275, 146.28, 146.28, 146.285, 146.285, 146.275, 146.2742,
             146.27, 146.275, 146.275, 146.275, 146.27, 146.2689, 146.255, 146.25, 146.245, 146.245, 146.2111, 146.2199,
             146.215, 146.2173, 146.22, 146.24, 146.22, 146.2008, 146.21, 146.22, 146.215, 146.215, 146.215, 146.2166,
             146.205, 146.205, 146.1901, 146.1801, 146.155, 146.165, 146.175, 146.18, 146.179, 146.18, 146.1701, 146.21,
             146.2167, 146.2184, 146.2289, 146.23, 146.23, 146.23, 146.23, 146.24, 146.2499, 146.2401, 146.25, 146.2501,
             146.25, 146.25, 146.2581, 146.26, 146.26, 146.2511, 146.25, 146.25, 146.25, 146.2402, 146.24, 146.2501,
             146.25, 146.25, 146.25, 146.25, 146.26, 146.26, 146.255, 146.26, 146.26, 146.26, 146.255, 146.26, 146.28,
             146.28, 146.285, 146.295, 146.3, 146.3, 146.3, 146.305, 146.329, 146.33, 146.355, 146.3601, 146.3611,
             146.385, 146.385, 146.3893, 146.4, 146.415, 146.4, 146.4, 146.3927, 146.405, 146.4, 146.405, 146.405,
             146.415, 146.4117, 146.4001, 146.385, 146.385, 146.3804, 146.3813, 146.385, 146.375, 146.385, 146.38,
             146.3808, 146.385, 146.385, 146.375, 146.375, 146.375, 146.375, 146.36, 146.35, 146.36, 146.3699, 146.365,
             146.37, 146.37, 146.37, 146.37, 146.38, 146.395, 146.399, 146.4, 146.4034, 146.3978, 146.3912, 146.3901,
             146.3832, 146.3832, 146.385, 146.3865, 146.3833, 146.38, 146.375, 146.3709, 146.37, 146.355, 146.355,
             146.3692, 146.3621, 146.3621, 146.3687, 146.37, 146.375, 146.37, 146.36, 146.36, 146.35, 146.3509, 146.365,
             146.3699, 146.3516, 146.3516, 146.3516, 146.3471, 146.3471, 146.3409, 146.3409, 146.3329, 146.3329,
             146.3315, 146.34, 146.345, 146.3332, 146.35, 146.37, 146.3755, 146.36, 146.35, 146.3516, 146.3516, 146.345,
             146.345, 146.345, 146.335, 146.34, 146.34, 146.335, 146.335, 146.34, 146.3611, 146.3611, 146.375, 146.3689,
             146.3689, 146.3689, 146.3689, 146.3524, 146.3524, 146.3524, 146.355, 146.375, 146.375, 146.38, 146.39,
             146.3841, 146.38, 146.375, 146.37, 146.37, 146.37, 146.375, 146.375, 146.37, 146.38, 146.38, 146.38, 146.38,
             146.38, 146.38, 146.375, 146.39, 146.3895, 146.39, 146.37, 146.37, 146.37, 146.38, 146.38, 146.3703,
             146.365, 146.37, 146.3771, 146.3701, 146.375, 146.38, 146.385, 146.395, 146.395, 146.4099, 146.42, 146.4101,
             146.42, 146.42, 146.43, 146.44, 146.45, 146.44, 146.4199, 146.4299, 146.4364, 146.445, 146.44, 146.44,
             146.44, 146.435, 146.425, 146.42, 146.425, 146.425, 146.425, 146.44, 146.445, 146.4359, 146.435, 146.4499,
             146.4499, 146.431, 146.435, 146.44, 146.43, 146.432, 146.44, 146.44, 146.44, 146.445, 146.44, 146.42,
             146.425, 146.425, 146.42, 146.43, 146.4249, 146.43, 146.43, 146.43, 146.4301, 146.4399, 146.47, 146.465,
             146.46, 146.4639, 146.48, 146.47, 146.47, 146.48, 146.5, 146.5, 146.4971, 146.495, 146.5044, 146.504,
             146.5041, 146.505, 146.505, 146.5055, 146.5054, 146.5, 146.4922, 146.495, 146.495, 146.51, 146.5006, 146.51,
             146.51, 146.525, 146.525, 146.53, 146.545, 146.55, 146.5401, 146.5301, 146.5333, 146.53, 146.53, 146.53,
             146.55, 146.56, 146.55, 146.545, 146.545, 146.545, 146.545, 146.54, 146.545, 146.5446, 146.54, 146.53,
             146.525, 146.52, 146.5272, 146.525, 146.525, 146.535, 146.5245, 146.5201, 146.53, 146.5154, 146.515,
             146.5199, 146.5199, 146.505, 146.5194, 146.52, 146.52, 146.515, 146.52, 146.51, 146.5101, 146.5, 146.51,
             146.51, 146.52, 146.51, 146.51, 146.51, 146.53, 146.5241, 146.532, 146.53, 146.535, 146.535, 146.535,
             146.535, 146.53, 146.529, 146.528, 146.5216, 146.52, 146.525, 146.5201, 146.5201, 146.52, 146.52, 146.515,
             146.51, 146.5117, 146.5119, 146.5119, 146.515, 146.52, 146.53, 146.53, 146.54, 146.5439, 146.555, 146.55,
             146.5592, 146.555, 146.555, 146.555, 146.55, 146.55, 146.5403, 146.5418, 146.54, 146.52, 146.5301, 146.535,
             146.5401, 146.55, 146.54, 146.545, 146.545, 146.54, 146.54, 146.5451, 146.5451, 146.5451, 146.545, 146.54,
             146.54, 146.54, 146.5399, 146.535, 146.535, 146.535, 146.5377, 146.55, 146.55, 146.555, 146.555, 146.5587,
             146.58, 146.5789, 146.5789, 146.58, 146.576, 146.576, 146.576, 146.575, 146.5874, 146.5814, 146.5814,
             146.5846, 146.57, 146.56, 146.56, 146.57, 146.57, 146.58, 146.58, 146.5801, 146.62, 146.64, 146.62, 146.635,
             146.63, 146.63, 146.61, 146.6209, 146.6228, 146.6201, 146.63, 146.62, 146.62, 146.615, 146.6199, 146.61,
             146.6199, 146.615, 146.62, 146.625, 146.625, 146.6253, 146.625, 146.62, 146.62, 146.6383, 146.625, 146.635,
             146.6448, 146.65, 146.65, 146.65, 146.6488, 146.66, 146.65, 146.645, 146.6509, 146.645, 146.65, 146.6501,
             146.668, 146.6707, 146.6801, 146.6814, 146.685, 146.7, 146.71, 146.72, 146.72, 146.75, 146.73, 146.735,
             146.7257, 146.72, 146.715, 146.71, 146.7139, 146.7118, 146.72, 146.72, 146.73, 146.7277, 146.705, 146.71,
             146.71, 146.7009, 146.705, 146.7026, 146.7, 146.6995]
bullshit2 = [142.275, 142.265,
             142.265, 142.2596, 142.26, 142.265, 142.265, 142.26, 142.255, 142.235, 142.26, 142.265, 142.265, 142.2599, 142.265, 142.2701, 142.275, 142.26, 142.26, 142.26, 142.28, 142.27, 142.275, 142.26, 142.2699, 142.2699, 142.2699, 142.2619, 142.24, 142.25, 142.295, 142.2867, 142.29, 142.3, 142.29, 142.29, 142.28, 142.3, 142.29, 142.3, 142.285, 142.28, 142.3, 142.31, 142.31, 142.31, 142.3, 142.3, 142.3, 142.31, 142.35, 142.3574, 142.3783, 142.375, 142.385, 142.385, 142.395, 142.4, 142.3721, 142.3749, 142.385, 142.389, 142.39, 142.38, 142.3797, 142.375, 142.38, 142.375, 142.365, 142.36, 142.355, 142.34, 142.3301, 142.32, 142.3, 142.3, 142.31, 142.3199, 142.32, 142.3209, 142.34, 142.36, 142.36, 142.35, 142.345, 142.3357, 142.32, 142.33, 142.335, 142.34, 142.33, 142.36, 142.3799, 142.4, 142.37, 142.3784, 142.38, 142.39, 142.3801, 142.3857, 142.3815, 142.39, 142.415, 142.405, 142.39, 142.3987, 142.3925, 142.3887, 142.4, 142.4, 142.39, 142.39, 142.39, 142.39, 142.39, 142.4, 142.4025, 142.4035, 142.41, 142.4099, 142.395, 142.385, 142.38, 142.37, 142.38, 142.3759, 142.38, 142.373, 142.39, 142.39, 142.37, 142.375, 142.37, 142.37, 142.395, 142.3998, 142.399, 142.37, 142.3701, 142.36, 142.36, 142.37, 142.4, 142.405, 142.4, 142.418, 142.43, 142.4356, 142.435, 142.4401, 142.445, 142.4391, 142.445, 142.44, 142.4389, 142.433, 142.4587, 142.46, 142.455, 142.46, 142.45, 142.48, 142.47, 142.46, 142.48, 142.48, 142.47, 142.47, 142.49, 142.514, 142.52, 142.5101, 142.49, 142.49, 142.495, 142.49, 142.5, 142.5, 142.51, 142.53, 142.545, 142.555, 142.56, 142.58, 142.565, 142.54, 142.5302, 142.525, 142.515, 142.53, 142.5347, 142.535, 142.5301, 142.54, 142.5499, 142.525, 142.5201, 142.517, 142.52, 142.525, 142.53, 142.52, 142.52, 142.5, 142.481, 142.505, 142.51, 142.49, 142.5, 142.49, 142.45, 142.465, 142.45, 142.42, 142.43, 142.42, 142.41, 142.4045, 142.405, 142.4, 142.4, 142.3968, 142.4, 142.401, 142.4, 142.3907, 142.3828, 142.391, 142.38, 142.34, 142.352, 142.37, 142.335, 142.3313, 142.335, 142.33, 142.33, 142.345, 142.3409, 142.355, 142.35, 142.3657, 142.37, 142.37, 142.38, 142.39, 142.42, 142.41, 142.42, 142.415, 142.4, 142.4, 142.4209, 142.425, 142.4253, 142.43, 142.43, 142.44, 142.44, 142.4329, 142.43, 142.46, 142.47, 142.45, 142.445, 142.425, 142.44, 142.45, 142.45, 142.475, 142.465, 142.4722, 142.5, 142.49, 142.485, 142.5, 142.4957, 142.5, 142.505, 142.5001, 142.53, 142.54, 142.53, 142.54, 142.53, 142.525, 142.53, 142.515, 142.52, 142.5127, 142.51, 142.51, 142.49, 142.4656, 142.46, 142.465, 142.465, 142.46, 142.4357, 142.42, 142.43, 142.425, 142.41, 142.445, 142.4499, 142.442, 142.44, 142.4399, 142.44, 142.45, 142.44, 142.48, 142.4747, 142.48, 142.48, 142.46, 142.47, 142.46, 142.49, 142.48, 142.465, 142.48, 142.49, 142.49, 142.4999, 142.5, 142.505, 142.51, 142.52, 142.51, 142.51, 142.51, 142.51, 142.515, 142.52, 142.5257, 142.55, 142.565, 142.56, 142.59, 142.585, 142.5501, 142.57, 142.58, 142.58, 142.575, 142.59, 142.59, 142.615, 142.6, 142.619, 142.64, 142.625, 142.615, 142.63, 142.63, 142.62, 142.6101, 142.595, 142.6011, 142.6026, 142.6043, 142.6299, 142.6392, 142.6216, 142.63, 142.645, 142.665, 142.66, 142.675, 142.6871, 142.685, 142.6801, 142.69, 142.68, 142.66, 142.68, 142.665, 142.6693, 142.675, 142.685, 142.69, 142.705, 142.705, 142.715, 142.71, 142.7101, 142.725, 142.72, 142.7064, 142.72, 142.715, 142.7127, 142.72, 142.71, 142.71, 142.69, 142.7, 142.675, 142.6599, 142.6315, 142.64, 142.66, 142.69, 142.655, 142.68, 142.71, 142.73, 142.735, 142.74, 142.745, 142.68, 142.6868, 142.685, 142.695, 142.695, 142.6565, 142.665, 142.655, 142.65, 142.665, 142.685, 142.685, 142.69, 142.68, 142.7, 142.69, 142.7201, 142.7, 142.685, 142.68, 142.6749, 142.69, 142.67, 142.675, 142.67, 142.685, 142.68, 142.6699, 142.685, 142.69, 142.695, 142.69, 142.7, 142.695, 142.66, 142.685, 142.695, 142.72, 142.705, 142.71, 142.7189, 142.73, 142.725, 142.705, 142.7, 142.71, 142.73, 142.71, 142.68, 142.685, 142.69, 142.69, 142.68, 142.691, 142.6962, 142.7, 142.7, 142.6833, 142.68, 142.69, 142.685, 142.6913, 142.69, 142.67, 142.67, 142.675, 142.66, 142.68, 142.675, 142.67, 142.665, 142.65, 142.645, 142.64, 142.645, 142.63, 142.645, 142.63, 142.625, 142.62, 142.61, 142.63, 142.59, 142.6199, 142.625, 142.66, 142.6715, 142.67, 142.6799, 142.67, 142.68, 142.69, 142.7, 142.695, 142.705, 142.71, 142.715, 142.72, 142.71, 142.71, 142.6814, 142.6923, 142.705, 142.6999, 142.6999, 142.7076, 142.705, 142.71, 142.73, 142.73, 142.7399, 142.7354, 142.735, 142.74, 142.765, 142.76, 142.77, 142.79, 142.78, 142.78, 142.77, 142.7501, 142.7019, 142.705, 142.705, 142.7, 142.6614, 142.66, 142.66, 142.635, 142.63, 142.645, 142.67, 142.68, 142.685, 142.68, 142.685, 142.6858, 142.6882, 142.691, 142.7001, 142.72, 142.71, 142.7313, 142.7373, 142.735, 142.71, 142.7, 142.695, 142.6971, 142.705, 142.76, 142.74, 142.745, 142.7301, 142.73, 142.73, 142.74, 142.7399, 142.74, 142.7599, 142.7873, 142.785, 142.8, 142.8, 142.795, 142.8075, 142.8, 142.7946, 142.82, 142.84, 142.835, 142.8386, 142.8399, 142.82, 142.825, 142.825, 142.84, 142.85, 142.8557, 142.865, 142.915, 142.87, 142.86, 142.855, 142.835, 142.82, 142.81, 142.82, 142.8166, 142.8169, 142.8275, 142.805, 142.8, 142.793, 142.805, 142.81, 142.7946, 142.795, 142.78, 142.78, 142.775, 142.76, 142.76, 142.7793, 142.7995, 142.79, 142.795, 142.8, 142.805, 142.8, 142.805, 142.7929, 142.782, 142.7918, 142.79, 142.79, 142.79, 142.795, 142.805, 142.815, 142.83, 142.87, 142.82, 142.79, 142.78, 142.765, 142.76, 142.76, 142.71, 142.71, 142.7101, 142.695, 142.65, 142.645, 142.66]
data, buys, sells = [], [], []

fig, (ax1, ax2) = plt.subplots(2, 1, height_ratios=[2, 1])
fig.show()

for iteration in range(periods):
    start_time = time.time()
    current_time = iteration
    # current_price = bullshit2[iteration]
    # current_time = dt.datetime.now().strftime('%M:%S')
    current_price = functions.streamPrice(ticker, key)
    data.append([current_time, current_price])
    average = functions.streamAverage(data, average_length)
    data[-1].append(functions.streamAverage(data, average_length))

    if iteration > average_length and current_price > average and in_position is False:
        functions.buy(ticker, key, order_size, safety)
        buys.append([current_time, current_price])
        checkpoint, current_position, in_position = pl, current_price, True
    elif iteration > average_length and average >= current_price and in_position is True:
        functions.sell(ticker, key, order_size, safety)
        sells.append([current_time, current_price])
        pl, in_position = checkpoint + pl, False
    elif iteration == periods and in_position is True:
        functions.sell(ticker, key, order_size, safety)
        sells.append([current_time, current_price])
        data[-1].append(checkpoint + pl)
        in_position = False
        break
    if in_position is True:
        pl = (current_price - current_position) * order_size
        data[-1].append(checkpoint + pl)
    elif in_position is False:
        # placeholder
        data[-1].append(pl)

    data = data[-scale:]

    functions.graph(ticker, fig, ax1, ax2, iteration, scale, data, average_length, buys, sells, pl)
    functions.sleep(start_time, iteration)

-----------------------------------------------------------------
[[[[[[[[Data Collector V1]]]]]]]]
import json
import asyncio
from tda.auth import easy_client
from tda.streaming import StreamClient
from tda import auth
import config
from playsound import playsound

entries = int(input('How many entries? '))
response = input('Confirm data override? (Y/N) ').upper()
if response == 'Y':
    pass
elif response == 'N':
    exit()
else:
    print('Entry error')
file = open('market_data.py', 'w+')
file.write('data = [')
file.write('\n')


def authenticate():
    try:
        return auth.client_from_token_file(config.token_path, config.api_key)
    except FileNotFoundError:
        from selenium import webdriver
        with webdriver.Chrome(executable_path='/Users/ryanhermes/opt/anaconda3/envs/td-bot/chromedriver') as driver:
            return auth.client_from_login_flow(driver, config.api_key, config.redirect_uri, config.token_path)


def streamPrice(ticker, key):
    dictionary = json.loads(json.dumps(key.get_quotes(f'{ticker}').json()))
    while True:
        try:
            return dictionary[f'{ticker}']['regularMarketLastPrice']
        except KeyError:
            continue


async def stream():
    await stream_client.login()
    await stream_client.quality_of_service(StreamClient.QOSLevel.EXPRESS)
    stream_client.add_nasdaq_book_handler(order_book_handler)
    await stream_client.nasdaq_book_subs([ticker])

    for i in range(entries):
        print(f'Iteration: {i}')
        await stream_client.handle_message()


def order_book_handler(msg):
    dictionary = json.loads(json.dumps(msg))

    file.write('[')
    file.write(str(streamPrice(ticker, key)))
    file.write(', ')
    file.write(f'{dictionary}')
    file.write('],')
    file.write('\n')


ticker = 'aapl'.upper()
key = authenticate()
stream_client = StreamClient(easy_client(api_key=config.api_key, redirect_uri=config.redirect_uri,
                                         token_path=config.token_path), account_id=config.account_id)

asyncio.run(stream())

file.write(']')
playsound('chime.mp3')